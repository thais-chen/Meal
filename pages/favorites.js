import { useSignInWithEmailAndPassword } from "react-firebase-hooks/auth";
import { auth } from "../configs";
import { useState, useEffect } from "react";
import Router, { useRouter } from "next/router";
import { getAuth, onAuthStateChanged } from "firebase/auth";

import Head from "next/head";
import styles from "../styles/Favorites.module.scss";
import {
  doc,
   getDoc,

} from "firebase/firestore";
import { db } from "../configs";
import Favorite from "../comps/Favorite";
import Navbar from "../comps/Navbar";

export default function Favorites() {
  const [faveArray, setFaveArray] = useState([]);
  const [docRef, setDocRef] = useState("");
  const [isUser, setIsUser] = useState(false);
  const [isFave, setIsFave] = useState(true);
  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setDocRef(doc(db, "users", user.uid));
        setIsUser(true);
      } else {
        Router.push("/");
      }
    });
  }, [auth]);

  useEffect(() => {
    if (isUser) {
      loadFaves();
    }
  }, [isUser]);
  const openInNewTab = (url) => {
    window.open(url, "_blank", "noopener,noreferrer");
  };
  function recipeLink(id) {
    const options = {
      method: "GET",
      headers: {
        "X-RapidAPI-Key": "29a63a7413msh8378b61a2e11cf3p192e62jsn53d83f1651fe",
        "X-RapidAPI-Host":
          "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com",
      },
    };
    fetch(
      `https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/${id}/information`,
      options
    )
      .then((response) => response.json())
      .then((response) => {
        openInNewTab(response.sourceUrl);
      })
      .catch((err) => console.error(err));
  }

  async function loadFaves() {
    const docSnap = await getDoc(docRef, "favorites");
    if (docSnap.exists()) {
      console.log("Document data:", docSnap.data());
      setFaveArray(docSnap.data().favorites);
      console.log(faveArray);
    }
  }
  const favoritesGrid = faveArray.map((item, id) => {
    return (
      <div key={id} className={styles.recipeItem}>
        <img
          src={item.image}
          onClick={(e) => {
            e.stopPropagation();
            recipeLink(item.id);
          }}
        />
        <div className="flex justify-between">
          <p className={styles.recipeTitle}>{item.title}</p>
          <Favorite
            recipe={item}
            id={id}
            isFave={item.fave}
            docRef={docRef}
            setIsFave={setIsFave}
            recipesApi={faveArray}
          />
        </div>
      </div>
    );
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Favorites</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar favoritesPg={"/favorites"} ingredients={"/ingredients"} />
      <div className={styles.main}>
        <h1>Favorites</h1>
        <div
          className={`${styles.favorites} grid md:grid-cols-4 gap-4 mt-4 mb-4 pb-24 justify-items-center `}
>
          {favoritesGrid}
        </div>
      </div>
    </div>
  );
}
